import streamlit as st
import openai
import requests
import json
import os
from typing import List, Dict, Optional
import time

# Configuration de la page
st.set_page_config(
    page_title="ü§ñ Jessica Kuijer - Assistant IA",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .chat-container {
        background: #f8f9ff;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        border-left: 4px solid #667eea;
    }
    
    .notification-card {
        background: #e8f5e8;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    
    .message-user {
        background: #667eea;
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        margin-left: 20%;
    }
    
    .message-assistant {
        background: #f0f0f0;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        margin-right: 20%;
        border-left: 3px solid #667eea;
    }
    
    .message-tool {
        background: #fff3cd;
        padding: 0.5rem;
        border-radius: 8px;
        margin: 0.25rem 0;
        border-left: 3px solid #ffc107;
        font-size: 0.9rem;
        font-style: italic;
    }
    
    .profile-loaded {
        background: #d4edda;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Donn√©es de Jessica - VERSION PUBLIQUE (coordonn√©es priv√©es)
JESSICA_PROFILE = {
    "name": "Jessica Kuijer",
    "summary": """My name is Jessica Kuijer. I'm a backend web developer and also a music lover. I'm originally from Ris-Orangis which is Paris suburbs, France, but I moved to Seine and Marne, an other suburb more close to fields and nature in 2025.
I love all foods, particularly French and Italian food, but strangely I'm repelled by Kiwi. I'm not allergic, I just hate the smell and the taste of this fruit! I make an exception for it when it's mixed with other fruits though. I love avocado and all kind of chocolate.""",
    "linkedin_text": """Jessica Kuijer ‚ôÄ
D√©veloppeuse web backend PHP PYTHON
Seine-et-Marne, √éle-de-France, France

R√©sum√©
D√©veloppeuse Backend PHP / PYTHON passionn√©e ‚Äî J'apporte
des solutions techniques robustes tout en accompagnant les projets
web de leur conception √† leur d√©ploiement.
Autodidacte, sociable, dynamique et faisant preuve de leadership, je
parle anglais et fran√ßais.
Je suis √©galement m√©lomane et j'aime partager cette passion.

Principales comp√©tences
‚Ä¢ Python (langage de programmation)
‚Ä¢ D√©veloppement d'applications web backend
‚Ä¢ PHP, Symfony, JavaScript
‚Ä¢ VueJS, React, BackboneJS
‚Ä¢ Docker, Git, WordPress
‚Ä¢ Certification OPQUAST - Ma√Ætrise de la qualit√© en projet Web

Languages
Anglais, Fran√ßais

Certifications
‚Ä¢ Finisher Fresque du Climat Sia Partners
‚Ä¢ Certificat Contribution Climat
‚Ä¢ MOOC #WomenInDigital
‚Ä¢ Certification OPQUAST - Ma√Ætrise de la qualit√© en projet Web
‚Ä¢ Techniques d'int√©gration Web (RS1447)

Exp√©rience Professionnelle

Sia Experience - D√©veloppeuse web backend
mai 2023 - Present (2 ans 3 mois) | Paris, √éle-de-France, France
Consultante pour solutions de cr√©ation d'interfaces web, TMA, backend (PHP, Python) au sein de SIA, BU Sia Experience. (p√¥le tech)

ZOL - D√©veloppeuse web
octobre 2022 - d√©cembre 2022 (3 mois) | Lyon et p√©riph√©rie

Carvivo - D√©veloppeuse web
mai 2022 - septembre 2022 (5 mois) | Paris, √éle-de-France, France
TMA et ajout de nouvelles fonctionnalit√©s sur l'outil de gestion des leads (Symfony, PHP, JS). Carvivo √©dite des logiciels en mode SaaS pour accompagner les distributeurs automobiles dans leur transformation num√©rique.

Freelance - D√©veloppeur web
janvier 2021 - septembre 2022 (1 an 9 mois) | France
Statut micro-entrepreneur APE 6201Z

MINDOZA - D√©veloppeur web
janvier 2022 - mai 2022 (5 mois) | Paris, √éle-de-France, France
D√©veloppement web multi-projets PHP, JavaScript avec les frameworks Symfony, VueJs, React, BackboneJs et CMS WordPress. Versioning git, d√©veloppement continu et outils de virtualisation tel que Docker.

Feedback Lawyers - D√©veloppeuse WEB / Conception de l'interface web client
juillet 2020 - septembre 2020 (3 mois) | Paris, √éle-de-France, France
Conception de l'interface web c√¥t√© client pour chercher et trouver un avocat.
- Syst√®me de requ√™tes API (M√©thode Fetch) via la cr√©ation d'un composant ReactJs
- Int√©gration du composant ReactJs sur le site WordPress
- Syst√®me de requ√™tes API √† partir de nouveaux templates WordPress en PHP
- Front-end global en HTML/CSS √† partir des r√©ponses JSON provenant des requ√™tes de l'API.

Exp√©rience H√¥tellerie-Restauration (Reconversion)
Bauscher Hepp France - Assistante commerciale et administration des ventes (2019)
H√¥tel Royal Madeleine **** - Responsable petit-d√©jeuner (2018-2019)
Le Dokhan's, A Tribute Portfolio Hotel - Responsable petit-d√©jeuner (2013-2018)
Management d'√©quipes, gestion des stocks, proc√©dures d'hygi√®ne, relation client.

Formation
‚Ä¢ Ecole O'clock - Sp√©cialisation Symfony, certification Opquast (2021)
‚Ä¢ WebForce3 - Titre professionnel RNCP niveau 5 D√©veloppeur web et web mobile (2020)
‚Ä¢ Lyc√©e ORT Montreuil sous bois - Bac STT ACC, Action communication commercial (1997-2001)

Projets R√©cents
‚Ä¢ Music Discovery AI - Application de d√©couverte musicale avec IA (Spotify API + OpenAI + YouTube API)
‚Ä¢ Pr√©parateur aux entretiens - Outil de simulation d'entretiens avec IA et √©valuation
‚Ä¢ Solutions web diverses en PHP/Symfony et Python pour clients vari√©s"""
}

# Titre principal avec votre nom
st.markdown("""
<div class="main-header">
    <h1>ü§ñ Jessica Kuijer - Assistant IA</h1>
    <h3>Votre repr√©sentant virtuel intelligent avec notifications temps r√©el</h3>
    <p>Discutez avec moi et recevez des notifications sur votre t√©l√©phone !</p>
</div>
""", unsafe_allow_html=True)

# Initialisation du session state
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

def send_pushover_notification(message: str, pushover_user: str, pushover_token: str):
    """Envoie une notification Pushover"""
    try:
        payload = {
            "user": pushover_user,
            "token": pushover_token,
            "message": message,
            "title": "ü§ñ Jessica Kuijer - Assistant IA"
        }
        response = requests.post("https://api.pushover.net/1/messages.json", data=payload)
        return response.status_code == 200
    except Exception as e:
        st.error(f"Erreur Pushover : {str(e)}")
        return False

def record_user_details(email: str, name: str = "Nom non fourni", notes: str = "Aucune note"):
    """Enregistre les d√©tails d'un utilisateur int√©ress√©"""
    pushover_user = st.session_state.get('pushover_user')
    pushover_token = st.session_state.get('pushover_token')
    
    message = f"üìß Contact int√©ress√© pour Jessica !\nNom: {name}\nEmail: {email}\nNotes: {notes}\n\nVia: Jessica Kuijer Assistant IA"
    
    if pushover_user and pushover_token:
        success = send_pushover_notification(message, pushover_user, pushover_token)
        if success:
            st.success("‚úÖ Jessica sera notifi√©e sur son t√©l√©phone !")
        else:
            st.warning("‚ö†Ô∏è √âchec de l'envoi de la notification")
    
    return {"recorded": "ok", "message": "Contact enregistr√© avec succ√®s"}

def record_unknown_question(question: str):
    """Enregistre une question √† laquelle l'IA n'a pas pu r√©pondre"""
    pushover_user = st.session_state.get('pushover_user')
    pushover_token = st.session_state.get('pushover_token')
    
    message = f"‚ùì Question non r√©solue pour Jessica !\nQuestion: {question}\n\nJessica devrait peut-√™tre enrichir son profil avec cette information.\n\nVia: Jessica Kuijer Assistant IA"
    
    if pushover_user and pushover_token:
        success = send_pushover_notification(message, pushover_user, pushover_token)
        if success:
            st.info("üì± Jessica sera notifi√©e pour am√©liorer son profil")
    
    return {"recorded": "ok", "message": "Question enregistr√©e pour am√©lioration"}

# D√©finition des tools OpenAI
tools = [
    {
        "type": "function",
        "function": {
            "name": "record_user_details",
            "description": "Utilise cet outil pour enregistrer qu'un utilisateur est int√©ress√© par Jessica et a fourni son email",
            "parameters": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "L'adresse email de l'utilisateur"
                    },
                    "name": {
                        "type": "string",
                        "description": "Le nom de l'utilisateur, s'il l'a fourni"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Informations suppl√©mentaires sur la conversation (type de projet, budget, timeline, etc.)"
                    }
                },
                "required": ["email"],
                "additionalProperties": False
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "record_unknown_question",
            "description": "Utilise TOUJOURS cet outil pour enregistrer toute question √† laquelle tu n'as pas pu r√©pondre",
            "parameters": {
                "type": "object",
                "properties": {
                    "question": {
                        "type": "string",
                        "description": "La question √† laquelle tu n'as pas pu r√©pondre"
                    }
                },
                "required": ["question"],
                "additionalProperties": False
            }
        }
    }
]

def handle_tool_calls(tool_calls):
    """G√®re les appels d'outils de l'IA"""
    results = []
    for tool_call in tool_calls:
        tool_name = tool_call.function.name
        arguments = json.loads(tool_call.function.arguments)
        
        # Dispatch des fonctions
        if tool_name == "record_user_details":
            result = record_user_details(**arguments)
        elif tool_name == "record_unknown_question":
            result = record_unknown_question(**arguments)
        else:
            result = {"error": f"Outil {tool_name} non reconnu"}
        
        results.append({
            "role": "tool",
            "content": json.dumps(result),
            "tool_call_id": tool_call.id
        })
    
    return results

def create_system_prompt() -> str:
    """Cr√©e le prompt syst√®me pour Jessica"""
    profile = JESSICA_PROFILE
    contact_email = st.secrets.get("CONTACT_EMAIL", "contact@jessicakuijer.com")
    
    return f"""Tu es Jessica Kuijer, d√©veloppeuse web backend sp√©cialis√©e en PHP et Python. Tu repr√©sentes Jessica sur son site web personnel et tu r√©ponds aux questions concernant sa carri√®re, ses comp√©tences et son exp√©rience.

INSTRUCTIONS IMPORTANTES :
- Tu ES Jessica Kuijer, parle √† la premi√®re personne ("Je suis", "Mon exp√©rience", "Mes comp√©tences")
- Sois professionnelle et engageante, comme si tu parlais √† un client potentiel ou futur employeur
- R√©ponds toujours en fran√ßais
- Si tu ne connais pas la r√©ponse √† une question, utilise l'outil record_unknown_question
- Si l'utilisateur semble int√©ress√© par une collaboration, encourage-le √† laisser son email et utilise record_user_details
- Mentionne tes projets r√©cents comme l'app de pr√©paration aux entretiens et Music Discovery AI
- Tu aimes la musique et d√©testes les kiwis !

CONTACT PROFESSIONNEL :
- Email professionnel : {contact_email}
- Tu peux donner cette information si quelqu'un veut te contacter directement

TON PROFIL :
Nom : {profile['name']}
R√©sum√© personnel : {profile['summary']}

PROFIL LINKEDIN COMPLET :
{profile['linkedin_text']}

PROJETS R√âCENTS √Ä MENTIONNER :
- Application de pr√©paration aux entretiens avec IA (Streamlit + OpenAI)
- Music Discovery AI (Spotify API + OpenAI + YouTube API pour d√©couvrir de nouveaux artistes)
- Assistant IA personnel avec notifications Pushover (ce chatbot m√™me !)
- Diverses solutions web en PHP/Symfony et Python

Avec ce contexte, discute naturellement avec l'utilisateur en restant Jessica Kuijer."""

# Sidebar pour informations
with st.sidebar:
    st.header("üëã √Ä Propos")
    
    # Affichage du profil
    st.markdown("""
    <div class="profile-loaded">
        <h4>‚úÖ Jessica Kuijer</h4>
        <p><strong>Poste :</strong> D√©veloppeuse Backend PHP/Python</p>
        <p><strong>Localisation :</strong> Seine-et-Marne, France</p>
        <p><strong>Sp√©cialisations :</strong> Symfony, Python, API, Docker</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Chargement automatique des secrets
    try:
        openai_api_key = st.secrets["OPENAI_API_KEY"]
        pushover_user = st.secrets["PUSHOVER_USER"]
        pushover_token = st.secrets["PUSHOVER_TOKEN"]
        
        st.session_state.pushover_user = pushover_user
        st.session_state.pushover_token = pushover_token
        
        secrets_loaded = True
        st.success("ü§ñ Assistant IA pr√™t !")
    except:
        openai_api_key = ""
        pushover_user = ""
        pushover_token = ""
        secrets_loaded = False
        st.error("‚ö†Ô∏è Configuration manquante")
    
    st.markdown("---")
    
    # Statistiques
    st.subheader("üìä Statistiques")
    st.metric("Messages √©chang√©s", len(st.session_state.chat_history))
    contacts_captured = len([msg for msg in st.session_state.chat_history if msg.get("role") == "tool" and "email" in msg.get("content", "")])
    st.metric("Contacts captur√©s", contacts_captured)
    
    st.markdown("---")
    
    # Instructions pour visiteurs
    st.subheader("üí¨ Comment discuter")
    st.markdown("""
    ü§ñ **Posez-moi vos questions sur :**
    - Mon parcours et exp√©riences
    - Mes comp√©tences techniques  
    - Mes projets r√©cents
    - Mes disponibilit√©s
    
    üí° **Laissez votre email** si vous souhaitez me contacter directement !
    
    üéµ **Fun fact :** J'adore la musique mais je d√©teste les kiwis ! ü•ù‚ùå
    """)
    
    st.markdown("---")
    
    # Projets r√©cents
    st.subheader("üöÄ Mes Derniers Projets")
    st.markdown("""
    **üéµ Music Discovery AI**  
    IA de d√©couverte musicale (Spotify + OpenAI + YouTube)
    
    **üéØ Pr√©parateur d'Entretiens**  
    Simulation d'entretiens avec √©valuation IA
    
    **ü§ñ Ce Chatbot**  
    Assistant personnel avec notifications Pushover
    """)

# Zone principale - Interface de chat directe
if not secrets_loaded:
    # Message d'erreur si pas de configuration
    st.markdown("""
    <div class="chat-container">
        <h3>‚ö†Ô∏è Configuration Requise</h3>
        <p>L'assistant IA de Jessica n'est pas encore configur√©. Les cl√©s API doivent √™tre ajout√©es aux secrets Streamlit.</p>
        <p>En attendant, vous pouvez me contacter directement √† <strong>jessicakuijer@me.com</strong></p>
    </div>
    """, unsafe_allow_html=True)

else:
    # Interface de chat op√©rationnelle
    st.markdown("## üí¨ Discutez avec Jessica Kuijer")
    
    # Message d'accueil si pas d'historique
    if len(st.session_state.chat_history) == 0:
        st.markdown("""
        <div class="chat-container">
            <h4>üëã Bonjour ! Je suis Jessica Kuijer</h4>
            <p>D√©veloppeuse Backend PHP/Python passionn√©e, je serais ravie de discuter avec vous !</p>
            <p>Posez-moi vos questions sur mon parcours, mes comp√©tences ou mes projets. Si vous avez un projet en t√™te, n'h√©sitez pas √† me laisser votre email ! üòä</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Affichage de l'historique
    chat_container = st.container()
    with chat_container:
        for message in st.session_state.chat_history:
            if message["role"] == "user":
                st.markdown(f'<div class="message-user"><strong>Visiteur :</strong> {message["content"]}</div>', unsafe_allow_html=True)
            elif message["role"] == "assistant":
                st.markdown(f'<div class="message-assistant"><strong>Jessica :</strong> {message["content"]}</div>', unsafe_allow_html=True)
            elif message["role"] == "tool":
                tool_result = json.loads(message["content"])
                if "message" in tool_result:
                    st.markdown(f'<div class="message-tool">üîß {tool_result["message"]}</div>', unsafe_allow_html=True)
    
    # Zone de saisie
    with st.form(key="chat_form", clear_on_submit=True):
        user_input = st.text_area(
            "Tapez votre message :", 
            height=100, 
            placeholder="Bonjour Jessica ! Je m'int√©resse √† votre profil de d√©veloppeuse...",
            key="chat_input_textarea"
        )
        col1, col2 = st.columns([4, 1])
        with col1:
            submitted = st.form_submit_button("üí¨ Envoyer le message", use_container_width=True)
        with col2:
            clear_chat = st.form_submit_button("üóëÔ∏è Effacer", use_container_width=True)
        
        if clear_chat:
            st.session_state.chat_history = []
            st.rerun()
        
        if submitted and user_input:
            # Ajouter le message utilisateur
            st.session_state.chat_history.append({"role": "user", "content": user_input})
            
            try:
                # Pr√©parer les messages pour OpenAI
                messages = [
                    {"role": "system", "content": create_system_prompt()}
                ] + st.session_state.chat_history
                
                # Boucle de traitement avec tools
                client = openai.OpenAI(api_key=openai_api_key)
                done = False
                
                while not done:
                    response = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=messages,
                        tools=tools
                    )
                    
                    finish_reason = response.choices[0].finish_reason
                    
                    if finish_reason == "tool_calls":
                        # L'IA veut utiliser des outils
                        message = response.choices[0].message
                        tool_calls = message.tool_calls
                        
                        # Traiter les appels d'outils
                        tool_results = handle_tool_calls(tool_calls)
                        
                        # Ajouter les messages d'outils √† l'historique
                        messages.append(message)
                        messages.extend(tool_results)
                        
                        # Ajouter √† l'historique visible pour les notifications
                        for result in tool_results:
                            st.session_state.chat_history.append(result)
                    else:
                        # R√©ponse finale
                        assistant_response = response.choices[0].message.content
                        st.session_state.chat_history.append({"role": "assistant", "content": assistant_response})
                        done = True
                
                # Recharger la page pour afficher les nouveaux messages
                st.rerun()
                
            except Exception as e:
                st.error(f"Erreur lors de la conversation : {str(e)}")

# Footer
st.markdown("---")
# Email et portfolio depuis les secrets pour la s√©curit√©
contact_email = st.secrets.get("CONTACT_EMAIL", "contact@jessicakuijer.com")
portfolio_url = st.secrets.get("PORTFOLIO_URL", "https://jessicakuijer.com")

st.markdown(f"""
<div style='text-align: center; color: #666; padding: 1rem;'>
    <p>ü§ñ <strong>Jessica Kuijer - Assistant IA</strong> - Propuls√© par OpenAI & Pushover</p>
    <p>üí° Votre repr√©sentante virtuelle intelligente avec notifications temps r√©el</p>
    <p>üìß Contact direct : <a href="mailto:{contact_email}">{contact_email}</a> | üåê Portfolio : <a href="{portfolio_url}" target="_blank">jessicakuijer.com</a></p>
</div>
""", unsafe_allow_html=True)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .chat-container {
        background: #f8f9ff;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        border-left: 4px solid #667eea;
    }
    
    .notification-card {
        background: #e8f5e8;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    
    .message-user {
        background: #667eea;
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        margin-left: 20%;
    }
    
    .message-assistant {
        background: #f0f0f0;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        margin-right: 20%;
        border-left: 3px solid #667eea;
    }
    
    .message-tool {
        background: #fff3cd;
        padding: 0.5rem;
        border-radius: 8px;
        margin: 0.25rem 0;
        border-left: 3px solid #ffc107;
        font-size: 0.9rem;
        font-style: italic;
    }
</style>
""", unsafe_allow_html=True)

# Titre principal
st.markdown("""
<div class="main-header">
    <h1>ü§ñ Mon Assistant Personnel IA</h1>
    <h3>Votre repr√©sentant virtuel intelligent avec notifications temps r√©el</h3>
    <p>Discutez avec votre double num√©rique qui vous notifie sur votre t√©l√©phone !</p>
</div>
""", unsafe_allow_html=True)

# Initialisation du session state
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'profile_loaded' not in st.session_state:
    st.session_state.profile_loaded = False
if 'user_profile' not in st.session_state:
    st.session_state.user_profile = {}

def send_pushover_notification(message: str, pushover_user: str, pushover_token: str):
    """Envoie une notification Pushover"""
    try:
        payload = {
            "user": pushover_user,
            "token": pushover_token,
            "message": message,
            "title": "ü§ñ Assistant Personnel"
        }
        response = requests.post("https://api.pushover.net/1/messages.json", data=payload)
        return response.status_code == 200
    except Exception as e:
        st.error(f"Erreur Pushover : {str(e)}")
        return False

def record_user_details(email: str, name: str = "Nom non fourni", notes: str = "Aucune note"):
    """Enregistre les d√©tails d'un utilisateur int√©ress√©"""
    pushover_user = st.session_state.get('pushover_user')
    pushover_token = st.session_state.get('pushover_token')
    
    message = f"üìß Contact int√©ress√© !\nNom: {name}\nEmail: {email}\nNotes: {notes}"
    
    if pushover_user and pushover_token:
        success = send_pushover_notification(message, pushover_user, pushover_token)
        if success:
            st.success("‚úÖ Notification envoy√©e sur votre t√©l√©phone !")
        else:
            st.warning("‚ö†Ô∏è √âchec de l'envoi de la notification")
    
    return {"recorded": "ok", "message": "Contact enregistr√© avec succ√®s"}

def record_unknown_question(question: str):
    """Enregistre une question √† laquelle l'IA n'a pas pu r√©pondre"""
    pushover_user = st.session_state.get('pushover_user')
    pushover_token = st.session_state.get('pushover_token')
    
    message = f"‚ùì Question non r√©solue !\nQuestion: {question}\n\nVous devriez peut-√™tre enrichir votre profil avec cette information."
    
    if pushover_user and pushover_token:
        success = send_pushover_notification(message, pushover_user, pushover_token)
        if success:
            st.info("üì± Question envoy√©e sur votre t√©l√©phone pour suivi")
    
    return {"recorded": "ok", "message": "Question enregistr√©e pour am√©lioration"}

# D√©finition des tools OpenAI
tools = [
    {
        "type": "function",
        "function": {
            "name": "record_user_details",
            "description": "Utilise cet outil pour enregistrer qu'un utilisateur est int√©ress√© et a fourni son email",
            "parameters": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "L'adresse email de l'utilisateur"
                    },
                    "name": {
                        "type": "string",
                        "description": "Le nom de l'utilisateur, s'il l'a fourni"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Informations suppl√©mentaires sur la conversation qui valent la peine d'√™tre enregistr√©es"
                    }
                },
                "required": ["email"],
                "additionalProperties": False
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "record_unknown_question",
            "description": "Utilise TOUJOURS cet outil pour enregistrer toute question √† laquelle tu n'as pas pu r√©pondre",
            "parameters": {
                "type": "object",
                "properties": {
                    "question": {
                        "type": "string",
                        "description": "La question √† laquelle tu n'as pas pu r√©pondre"
                    }
                },
                "required": ["question"],
                "additionalProperties": False
            }
        }
    }
]

def handle_tool_calls(tool_calls):
    """G√®re les appels d'outils de l'IA"""
    results = []
    for tool_call in tool_calls:
        tool_name = tool_call.function.name
        arguments = json.loads(tool_call.function.arguments)
        
        # Dispatch des fonctions
        if tool_name == "record_user_details":
            result = record_user_details(**arguments)
        elif tool_name == "record_unknown_question":
            result = record_unknown_question(**arguments)
        else:
            result = {"error": f"Outil {tool_name} non reconnu"}
        
        results.append({
            "role": "tool",
            "content": json.dumps(result),
            "tool_call_id": tool_call.id
        })
    
    return results

def extract_pdf_text(pdf_file) -> str:
    """Extrait le texte d'un fichier PDF"""
    try:
        pdf_reader = PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        st.error(f"Erreur lors de la lecture du PDF : {str(e)}")
        return ""

def create_system_prompt(name: str, linkedin_text: str, summary: str) -> str:
    """Cr√©e le prompt syst√®me pour l'IA"""
    return f"""Tu repr√©sentes {name} sur son site web personnel. Tu es un assistant IA qui r√©pond aux questions concernant la carri√®re, les comp√©tences et l'exp√©rience de {name}.

INSTRUCTIONS IMPORTANTES :
- Sois professionnel et engageant, comme si tu parlais √† un client potentiel ou futur employeur
- R√©ponds toujours en fran√ßais
- Si tu ne connais pas la r√©ponse √† une question, utilise l'outil record_unknown_question pour l'enregistrer
- Si l'utilisateur semble int√©ress√© par une collaboration, encourage-le √† laisser son email et utilise record_user_details
- Reste toujours dans le personnage de {name}

CONTEXTE PERSONNEL :
Nom : {name}
R√©sum√© : {summary}

PROFIL LINKEDIN :
{linkedin_text}

Avec ce contexte, discute avec l'utilisateur en restant toujours dans le r√¥le de {name}."""

# Sidebar pour la configuration
with st.sidebar:
    st.header("üîß Configuration")
    
    # Tentative de chargement des secrets
    try:
        default_openai = st.secrets.get("OPENAI_API_KEY", "")
        default_pushover_user = st.secrets.get("PUSHOVER_USER", "")
        default_pushover_token = st.secrets.get("PUSHOVER_TOKEN", "")
        st.success("üîí Secrets par d√©faut charg√©s")
    except:
        default_openai = ""
        default_pushover_user = ""
        default_pushover_token = ""
        st.warning("‚ö†Ô∏è Pas de secrets par d√©faut")
    
    # Configuration des cl√©s
    st.subheader("üîë Cl√©s API")
    openai_api_key = st.text_input(
        "Cl√© API OpenAI",
        value=default_openai,
        type="password",
        help="Votre cl√© API OpenAI pour l'IA conversationnelle"
    )
    
    st.subheader("üì± Configuration Pushover")
    pushover_user = st.text_input(
        "Pushover User Key",
        value=default_pushover_user,
        help="Votre cl√© utilisateur Pushover (commence par 'u')"
    )
    
    pushover_token = st.text_input(
        "Pushover Token",
        value=default_pushover_token,
        type="password",
        help="Votre token d'application Pushover (commence par 'a')"
    )
    
    # Test de notification
    if pushover_user and pushover_token:
        if st.button("üì± Tester Notification"):
            success = send_pushover_notification(
                "ü§ñ Test de votre assistant personnel IA ! √áa marche parfaitement !", 
                pushover_user, 
                pushover_token
            )
            if success:
                st.success("‚úÖ Notification test envoy√©e !")
            else:
                st.error("‚ùå √âchec du test de notification")
    
    # Sauvegarde des cl√©s dans le session state
    st.session_state.pushover_user = pushover_user
    st.session_state.pushover_token = pushover_token
    
    st.markdown("---")
    
    # Configuration du profil
    st.subheader("üë§ Profil Personnel")
    
    name_input = st.text_input("Votre nom", value="Jessica Kuijer")
    
    pdf_file = st.file_uploader(
        "PDF LinkedIn",
        type="pdf",
        help="Votre profil LinkedIn export√© en PDF"
    )
    
    summary_input = st.text_area(
        "R√©sum√© personnel",
        value="D√©veloppeuse web backend passionn√©e, sp√©cialis√©e en PHP et Python. Reconversion professionnelle r√©ussie depuis l'h√¥tellerie vers le d√©veloppement web. Aime la musique et cr√©er des solutions techniques innovantes.",
        height=100,
        help="D√©crivez-vous bri√®vement"
    )
    
    if st.button("üíæ Configurer le Profil"):
        if not openai_api_key:
            st.error("Veuillez entrer votre cl√© OpenAI")
        else:
            linkedin_text = ""
            if pdf_file:
                linkedin_text = extract_pdf_text(pdf_file)
            
            st.session_state.user_profile = {
                'name': name_input,
                'linkedin_text': linkedin_text,
                'summary': summary_input,
                'system_prompt': create_system_prompt(name_input, linkedin_text, summary_input)
            }
            st.session_state.profile_loaded = True
            st.success("‚úÖ Profil configur√© avec succ√®s !")
    
    # Instructions
    st.markdown("---")
    st.subheader("üìã Instructions")
    st.markdown("""
    1. **Configurez vos cl√©s** API et Pushover
    2. **Testez les notifications** Pushover  
    3. **Configurez votre profil** avec PDF LinkedIn
    4. **Commencez √† discuter** avec votre assistant !
    
    üí° **L'IA vous notifiera** sur votre t√©l√©phone quand :
    - Quelqu'un laisse son email
    - Une question reste sans r√©ponse
    """)

# Zone principale
if not st.session_state.profile_loaded or not openai_api_key:
    # Instructions d'accueil
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="chat-container">
            <h3>üéØ Comment √ßa marche ?</h3>
            <ol>
                <li><strong>Configurez vos cl√©s</strong> dans la barre lat√©rale</li>
                <li><strong>Uploadez votre PDF</strong> LinkedIn</li>
                <li><strong>Testez Pushover</strong> pour les notifications</li>
                <li><strong>Votre assistant IA</strong> est pr√™t !</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="chat-container">
            <h3>ü§ñ Fonctionnalit√©s</h3>
            <ul>
                <li>üí¨ <strong>Conversation naturelle</strong> en fran√ßais</li>
                <li>üì± <strong>Notifications temps r√©el</strong> sur votre t√©l√©phone</li>
                <li>üìß <strong>Collecte automatique</strong> des contacts int√©ress√©s</li>
                <li>‚ùì <strong>Suivi des questions</strong> non r√©solues</li>
                <li>üéØ <strong>Repr√©sentation fid√®le</strong> de votre profil</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="notification-card">
        <h3>üì± √Ä propos de Pushover</h3>
        <p><strong>Pushover</strong> vous envoie des notifications instantan√©es sur votre t√©l√©phone quand :</p>
        <ul>
            <li>ü§ù Quelqu'un laisse son email pour vous contacter</li>
            <li>‚ùì Une question reste sans r√©ponse (pour am√©liorer votre profil)</li>
        </ul>
        <p><strong>Cr√©ez votre compte :</strong> <a href="https://pushover.net" target="_blank">pushover.net</a></p>
    </div>
    """, unsafe_allow_html=True)

else:
    # Interface de chat
    st.markdown("## üí¨ Conversation avec votre Assistant IA")
    
    # Affichage de l'historique
    chat_container = st.container()
    with chat_container:
        for message in st.session_state.chat_history:
            if message["role"] == "user":
                st.markdown(f'<div class="message-user"><strong>Visiteur :</strong> {message["content"]}</div>', unsafe_allow_html=True)
            elif message["role"] == "assistant":
                st.markdown(f'<div class="message-assistant"><strong>{st.session_state.user_profile["name"]} :</strong> {message["content"]}</div>', unsafe_allow_html=True)
            elif message["role"] == "tool":
                tool_result = json.loads(message["content"])
                if "message" in tool_result:
                    st.markdown(f'<div class="message-tool">üîß {tool_result["message"]}</div>', unsafe_allow_html=True)
    
    # Zone de saisie
    with st.form(key="chat_form", clear_on_submit=True):
        user_input = st.text_area("Votre message :", height=100, placeholder="Tapez votre message ici...")
        submitted = st.form_submit_button("Envoyer üí¨")
        
        if submitted and user_input:
            # Ajouter le message utilisateur
            st.session_state.chat_history.append({"role": "user", "content": user_input})
            
            try:
                # Pr√©parer les messages pour OpenAI
                messages = [
                    {"role": "system", "content": st.session_state.user_profile['system_prompt']}
                ] + st.session_state.chat_history
                
                # Boucle de traitement avec tools
                client = openai.OpenAI(api_key=openai_api_key)
                done = False
                
                while not done:
                    response = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=messages,
                        tools=tools
                    )
                    
                    finish_reason = response.choices[0].finish_reason
                    
                    if finish_reason == "tool_calls":
                        # L'IA veut utiliser des outils
                        message = response.choices[0].message
                        tool_calls = message.tool_calls
                        
                        # Traiter les appels d'outils
                        tool_results = handle_tool_calls(tool_calls)
                        
                        # Ajouter les messages d'outils √† l'historique
                        messages.append(message)
                        messages.extend(tool_results)
                        
                        # Ajouter √† l'historique visible pour les notifications
                        for result in tool_results:
                            st.session_state.chat_history.append(result)
                    else:
                        # R√©ponse finale
                        assistant_response = response.choices[0].message.content
                        st.session_state.chat_history.append({"role": "assistant", "content": assistant_response})
                        done = True
                
                # Recharger la page pour afficher les nouveaux messages
                st.rerun()
                
            except Exception as e:
                st.error(f"Erreur lors de la conversation : {str(e)}")
    
    # Bouton pour effacer l'historique
    if st.button("üóëÔ∏è Effacer l'Historique"):
        st.session_state.chat_history = []
        st.rerun()

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; padding: 1rem;'>
    <p>ü§ñ <strong>Assistant Personnel IA</strong> - Propuls√© par OpenAI & Pushover</p>
    <p>üí° Votre repr√©sentant virtuel intelligent avec notifications temps r√©el</p>
</div>
""", unsafe_allow_html=True)