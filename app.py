import streamlit as st
import openai
import requests
import json
import os
from typing import List, Dict, Optional
import time
from pypdf import PdfReader  # Import ajout√©

# Configuration de la page
st.set_page_config(
    page_title="ü§ñ Jessica Kuijer - Assistant IA",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© unique
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .chat-container {
        background: #f8f9ff;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        border-left: 4px solid #667eea;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    .notification-card {
        background: #e8f5e8;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    
    .message-user {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        padding: 1rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        margin-left: 20%;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
    }
    
    .message-assistant {
        background: #ffffff;
        padding: 1rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        margin-right: 20%;
        border-left: 3px solid #667eea;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .message-tool {
        background: #fff3cd;
        padding: 0.5rem;
        border-radius: 8px;
        margin: 0.25rem 0;
        border-left: 3px solid #ffc107;
        font-size: 0.9rem;
        font-style: italic;
    }
    
    .profile-loaded {
        background: #d4edda;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    
    .error-box {
        background: #f8d7da;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #dc3545;
        margin: 1rem 0;
    }
    
    .success-box {
        background: #d1ecf1;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #17a2b8;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Donn√©es de Jessica - VERSION PUBLIQUE
JESSICA_PROFILE = {
    "name": "Jessica Kuijer",
    "summary": """Je suis Jessica Kuijer, d√©veloppeuse backend web passionn√©e par PHP et Python. Originaire de Ris-Orangis en banlieue parisienne, j'ai r√©cemment d√©m√©nag√© en Seine-et-Marne pour plus de confort et d'espace (et √™tre plus proche de la nature). J'adore tous les types de cuisine, particuli√®rement fran√ßaise et italienne, mais je d√©teste les kiwis (allergie)! Je suis √©galement m√©lomane et j'aime partager cette passion.""",
    "linkedin_text": """Jessica Kuijer ‚ôÄ
D√©veloppeuse web backend PHP PYTHON
Seine-et-Marne, √éle-de-France, France

R√©sum√©
D√©veloppeuse Backend PHP / PYTHON passionn√©e ‚Äî J'apporte des solutions techniques robustes tout en accompagnant les projets web de leur conception √† leur d√©ploiement. Actuellement en recherche d'un nouveau challenge, je suis √† la recherche d'un poste de d√©veloppeuse backend PHP / PYTHON et je suis disponible d√®s que possible. Je suis en cours de formation sur l'enrichissement de mes comp√©tences en Agentic AI.
Autodidacte, sociable, dynamique et faisant preuve de leadership, je parle anglais et fran√ßais.
Je suis √©galement m√©lomane (je fais de la batterie, j'adore aller √† des concerts, rencontrer des artistes) et j'aime partager cette passion.

Mobilit√© g√©ographique :
‚Ä¢ Paris, √éle-de-France (dans les 1h de train ou en voiture, j'ai le permis B)
‚Ä¢ Je peux travailler √† distance et en pr√©sentiel si n√©cessaire

Principales comp√©tences
‚Ä¢ Python, JavaScript, PHP (langages de programmation)
‚Ä¢ D√©veloppement d'applications web backend
‚Ä¢ SQL, NoSQL,MySQL, PostgreSQL, SQLite, Elasticsearch
‚Ä¢ Symfony, WordPress, Drupal
‚Ä¢ VueJS, React, BackboneJS
‚Ä¢ Docker, Git, CI/CD, API REST, WebSockets, authentification JWT/SSO, Redmine, GitLab, Jira
‚Ä¢ Tests fonctionnels, Tests qualit√© (QA)
‚Ä¢ Methodologies Agile, Scrum, Kanban, Cycle en V
‚Ä¢ OS Linux, Windows, MacOS, terminaux en ligne de commande

Ce que je ne maitrise pas mais serait pr√™te √† monter en comp√©tences :
‚Ä¢ Angular, Flutter, NodeJS, React Native
‚Ä¢ GraphQL, Azure, AWS, GCP, Kubernetes, Terraform, Ansible
‚Ä¢ Jenkins
‚Ä¢ Cron, Cronjob
‚Ä¢ MongoDB
‚Ä¢ Tests unitaires

Ce que je ne maitrise pas du tout car cela n'est pas dans mes comp√©tences :
‚Ä¢ C#, Java, C++, C, Oracle, SQL Server, MariaDB, Firebird, Informix, Sybase, DB2, Teradata, Vertica, Ingres, OpenEdge, Progress, dBase, Clipper, FoxPro, Turbo Pascal, Turbo C, Turbo C++, Turbo C#, SAP

Languages
Anglais (bilingue), Fran√ßais (langue maternelle)

Dipl√¥mes
‚Ä¢ Titre professionnel RNCP niveau 5 D√©veloppeur web et web mobile (2020)

Formations r√©centes et en cours
‚Ä¢ Formation Agentic AI - Udemy (2025)
‚Ä¢ Formation Scrum developper - SIA (2024)

Certifications
‚Ä¢ Finisher Fresque du Climat Sia Partners
‚Ä¢ Certificat Contribution Climat
‚Ä¢ MOOC #WomenInDigital
‚Ä¢ Certification OPQUAST - Ma√Ætrise de la qualit√© en projet Web
‚Ä¢ Techniques d'int√©gration Web (RS1447)

Exp√©rience Professionnelle

Sia Experience - D√©veloppeuse web backend
mai 2023 - aout 2025 (2 ans 3 mois) | Paris, √éle-de-France, France
Consultante pour solutions de cr√©ation d'interfaces web, TMA, backend (PHP, Python) au sein de SIA, BU Sia Experience.
D√©veloppement backend d'endpoints et fonctionnalit√©s selon cycle en V
Syst√®me d'authentification JWT et impl√©mentation SSO avec gestion des r√¥les
Int√©gration websockets (Swoole) pour interactions temps r√©el entre utilisateurs
Syst√®me de matching g√©ographique avec calculs de distances (ST_Distance_Sphere)
API REST avec requ√™tes r√©cursives et technologie IA custom (CooPhronie)
Interface d'administration avec pr√©-calculs statistiques
Technologies : Symfony7, Python/Flask, PHP, MySQL/PostgreSQL, React, Docker, WebSockets
Environnement : Redmine, GitLab, infrastructure microservices

Carvivo - D√©veloppeuse web
mai 2022 - septembre 2022 (5 mois) | Paris, √éle-de-France, France
TMA et ajout de nouvelles fonctionnalit√©s sur l'outil de gestion des leads (Symfony, PHP, JS).
Optimisation d'un outil de gestion de leads: correction de bugs et d√©veloppement de nouvelles
fonctionnalit√©s
Responsable des d√©ploiements hebdomadaires via Github Actions et tests fonctionnels (Selenium)
Impl√©mentation multilingue (FR/EN) et int√©gration front-end responsive
Collaboration en m√©thode agile avec points quotidiens et sprints bi-mensuels
Technologies : Symfony2.8, PHP, JS, jQuery, HTML/CSS (Twig)
Environnement : Jira, Github

MINDOZA - D√©veloppeur web
Mai 2021 - Mai 2022 (1 an) | Paris, √éle-de-France, France
D√©veloppement web multi-projets PHP, JavaScript avec Symfony, VueJs, React, BackboneJs et WordPress.
D√©veloppement backend des endpoints et nouvelles fonctionnalit√©s
D√©veloppement d'APIs REST et back-offices personnalis√©s selon m√©thodologie cycle en V
Maintenance √©volutives sur des projets utilisant diverses technologies (WordPress, Symfony, VueJS,
CSML, BackboneJS)
Impl√©mentation d'environnements conteneuris√©s Docker pour projets Symfony
Clients: Healthubby Alstom, Carl‚Äôs Jr, chatbots pour concours internes Eurosport pendant les JO de
Tokyo et Beijing, templates email groupe Casino

Feedback Lawyers - D√©veloppeuse WEB
juillet 2020 - septembre 2020 (3 mois) | Paris, √éle-de-France, France
Conception de l'interface web c√¥t√© client pour chercher et trouver un avocat.

Formation
‚Ä¢ Ecole O'clock - Sp√©cialisation Symfony, certification Opquast (2021)
‚Ä¢ WebForce3 - Titre professionnel RNCP niveau 5 D√©veloppeur web et web mobile (2020)

Projets R√©cents
‚Ä¢ Chatbot Jessica IA - Assistant IA personnel avec notifications Pushover
‚Ä¢ Music Discovery AI - Application de d√©couverte musicale avec IA
‚Ä¢ Pr√©parateur aux entretiens - Outil de simulation d'entretiens avec IA
‚Ä¢ Solutions web diverses en PHP/Symfony et Python"""
}

# Initialisation du session state
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'notification_count' not in st.session_state:
    st.session_state.notification_count = 0
if 'contact_count' not in st.session_state:
    st.session_state.contact_count = 0
if 'current_language' not in st.session_state:
    st.session_state.current_language = "french"

def send_pushover_notification(message: str, pushover_user: str, pushover_token: str):
    """Envoie une notification Pushover avec gestion d'erreurs am√©lior√©e"""
    if not pushover_user or not pushover_token:
        return False
        
    try:
        payload = {
            "user": pushover_user,
            "token": pushover_token,
            "message": message,
            "title": "ü§ñ Jessica Kuijer - Assistant IA",
            "priority": 0,
            "sound": "pushover"
        }
        response = requests.post("https://api.pushover.net/1/messages.json", data=payload, timeout=10)
        
        if response.status_code == 200:
            st.session_state.notification_count += 1
            return True
        else:
            st.error(f"Erreur Pushover: {response.status_code} - {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        st.error("Timeout lors de l'envoi de la notification Pushover")
        return False
    except Exception as e:
        st.error(f"Erreur Pushover : {str(e)}")
        return False

def record_user_details(email: str, name: str = "Nom non fourni", notes: str = "Aucune note"):
    """Enregistre les d√©tails d'un utilisateur int√©ress√©"""
    pushover_user = st.session_state.get('pushover_user')
    pushover_token = st.session_state.get('pushover_token')
    
    message = f"""üìß NOUVEAU CONTACT pour Jessica !

üë§ Nom: {name}
üìß Email: {email}
üìù Notes: {notes}

üåê Via: Jessica Kuijer Assistant IA
‚è∞ {time.strftime('%d/%m/%Y √† %H:%M')}"""
    
    if pushover_user and pushover_token:
        success = send_pushover_notification(message, pushover_user, pushover_token)
        if success:
            st.session_state.contact_count += 1
            st.success("‚úÖ Jessica sera notifi√©e sur son t√©l√©phone !")
            return {"recorded": "ok", "message": "Contact enregistr√© avec succ√®s"}
        else:
            st.warning("‚ö†Ô∏è Contact enregistr√© mais notification √©chou√©e")
            return {"recorded": "partial", "message": "Contact enregistr√©, notification √©chou√©e"}
    else:
        st.info("üíæ Contact enregistr√© (pas de notification configur√©e)")
        return {"recorded": "ok", "message": "Contact enregistr√© localement"}

def record_unknown_question(question: str):
    """Enregistre une question √† laquelle l'IA n'a pas pu r√©pondre"""
    pushover_user = st.session_state.get('pushover_user')
    pushover_token = st.session_state.get('pushover_token')
    
    message = f"""‚ùì QUESTION NON R√âSOLUE pour Jessica !

ü§î Question: {question}

üí° Suggestion: Jessica devrait enrichir son profil avec cette information.

üåê Via: Jessica Kuijer Assistant IA
‚è∞ {time.strftime('%d/%m/%Y √† %H:%M')}"""
    
    if pushover_user and pushover_token:
        success = send_pushover_notification(message, pushover_user, pushover_token)
        if success:
            st.info("üì± Jessica sera notifi√©e pour am√©liorer son profil")
        return {"recorded": "ok", "message": "Question enregistr√©e pour am√©lioration"}
    else:
        st.info("üíæ Question enregistr√©e localement")
        return {"recorded": "ok", "message": "Question enregistr√©e localement"}

# D√©finition des tools OpenAI
tools = [
    {
        "type": "function",
        "function": {
            "name": "record_user_details",
            "description": "Utilise cet outil pour enregistrer qu'un utilisateur est int√©ress√© par Jessica et a fourni son email",
            "parameters": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "L'adresse email de l'utilisateur"
                    },
                    "name": {
                        "type": "string",
                        "description": "Le nom de l'utilisateur, s'il l'a fourni"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Informations importantes: type de projet, budget, timeline, comp√©tences recherch√©es, etc."
                    }
                },
                "required": ["email"],
                "additionalProperties": False
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "record_unknown_question",
            "description": "Utilise TOUJOURS cet outil pour enregistrer toute question √† laquelle tu n'as pas pu r√©pondre",
            "parameters": {
                "type": "object",
                "properties": {
                    "question": {
                        "type": "string",
                        "description": "La question √† laquelle tu n'as pas pu r√©pondre"
                    }
                },
                "required": ["question"],
                "additionalProperties": False
            }
        }
    }
]

def handle_tool_calls(tool_calls):
    """G√®re les appels d'outils de l'IA avec gestion d'erreurs"""
    results = []
    for tool_call in tool_calls:
        try:
            tool_name = tool_call.function.name
            arguments = json.loads(tool_call.function.arguments)
            
            # Dispatch des fonctions
            if tool_name == "record_user_details":
                result = record_user_details(**arguments)
            elif tool_name == "record_unknown_question":
                result = record_unknown_question(**arguments)
            else:
                result = {"error": f"Outil {tool_name} non reconnu"}
            
            results.append({
                "role": "tool",
                "content": json.dumps(result),
                "tool_call_id": tool_call.id
            })
        except Exception as e:
            st.error(f"Erreur dans l'ex√©cution de l'outil {tool_call.function.name}: {str(e)}")
            results.append({
                "role": "tool",
                "content": json.dumps({"error": str(e)}),
                "tool_call_id": tool_call.id
            })
    
    return results

def translate_profile_to_english(profile: dict, openai_client) -> dict:
    """Traduit le profil Jessica en anglais en utilisant l'API OpenAI"""
    try:
        # Pr√©parer le texte √† traduire
        text_to_translate = f"""
Nom: {profile['name']}
R√©sum√©: {profile['summary']}

Profil LinkedIn:
{profile['linkedin_text']}
        """.strip()
        
        # Demander la traduction √† OpenAI
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system", 
                    "content": "Tu es un traducteur professionnel fran√ßais-anglais. Traduis le profil de Jessica Kuijer en anglais en gardant le style professionnel et authentique. Retourne la traduction au format JSON avec les cl√©s 'name', 'summary', et 'linkedin_text'."
                },
                {
                    "role": "user",
                    "content": f"Traduis ce profil en anglais: {text_to_translate}"
                }
            ],
            temperature=0.3
        )
        
        # Parser la r√©ponse JSON
        try:
            translated_content = response.choices[0].message.content
            # Essayer de parser le JSON directement
            if translated_content.strip().startswith('{'):
                translated_profile = json.loads(translated_content)
            else:
                # Si ce n'est pas du JSON valide, essayer d'extraire les parties
                translated_profile = {
                    "name": profile['name'],
                    "summary": translated_content,
                    "linkedin_text": translated_content
                }
            
            return translated_profile
        except json.JSONDecodeError:
            # Fallback si le parsing JSON √©choue
            return {
                "name": profile['name'],
                "summary": translated_content,
                "linkedin_text": translated_content
            }
            
    except Exception as e:
        st.error(f"Erreur lors de la traduction: {str(e)}")
        # Retourner le profil original en cas d'erreur
        return profile

def create_system_prompt(language: str = "french", openai_client=None) -> str:
    """Cr√©e le prompt syst√®me pour Jessica dans la langue demand√©e"""
    profile = JESSICA_PROFILE
    contact_linkedin = st.secrets.get("CONTACT_LINKEDIN", "https://www.linkedin.com/in/jessicakuijer/")
    
    if language == "english":
        # Si on a un client OpenAI, on peut traduire le profil dynamiquement
        if openai_client:
            try:
                translated_profile = translate_profile_to_english(profile, openai_client)
                profile = translated_profile
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Impossible de traduire le profil en anglais: {str(e)}")
                # Continuer avec le profil original
        
        return f"""You are Jessica Kuijer, a backend web developer specialized in PHP and Python. You represent Jessica on her personal website and answer questions about her career, skills, and experience.

IMPORTANT INSTRUCTIONS:
- You ARE Jessica Kuijer, speak in first person ("I am", "My experience", "My skills")
- Be professional, warm, and engaging
- Respond in English
- If you don't know the answer to a question, ALWAYS use the record_unknown_question tool
- If the user seems interested in collaboration or leaves their email, use record_user_details
- If the user seems to have a job opening or talks to me about a project, then ask for their email and information about the position or project, use record_user_details
- Mention your recent projects like the interview preparation app and Music Discovery AI
- Don't hesitate to mention your passion for music and your aversion to kiwis if relevant!

PROFESSIONAL CONTACT:
- Professional email: {contact_linkedin}
- You can give this information if someone wants to contact you directly

YOUR PROFILE:
Name: {profile['name']}
Personal summary: {profile['summary']}

COMPLETE LINKEDIN PROFILE:
{profile['linkedin_text']}

RECENT PROJECTS TO MENTION:
- Personal AI Assistant with Pushover notifications (this chatbot!)
- Interview preparation application with AI (Streamlit + OpenAI)
- Music Discovery AI (Spotify API + OpenAI + YouTube API to discover new artists)
- Various web solutions in PHP/Symfony and Python for my clients

With this context, discuss naturally with the user while remaining Jessica Kuijer. Be authentic and professional."""
    
    else:
        # Prompt en fran√ßais (par d√©faut)
        return f"""Tu es Jessica Kuijer, d√©veloppeuse web backend sp√©cialis√©e en PHP et Python. Tu repr√©sentes Jessica sur son site web personnel et tu r√©ponds aux questions concernant sa carri√®re, ses comp√©tences et son exp√©rience.

INSTRUCTIONS IMPORTANTES :
- Tu ES Jessica Kuijer, parle √† la premi√®re personne ("Je suis", "Mon exp√©rience", "Mes comp√©tences")
- Sois professionnelle, chaleureuse et engageante
- R√©ponds en fran√ßais mais si l'utilisateur te demande de r√©pondre en anglais alors reprends JESSICA_PROFILE en traduisant en anglais l'int√©gralit√© du texte et r√©ponds en anglais
- Si tu ne connais pas la r√©ponse √† une question, utilise OBLIGATOIREMENT l'outil record_unknown_question
- Si l'utilisateur semble int√©ress√© par une collaboration ou laisse son email, utilise record_user_details
- Si l'utilisateur semble avooir un poste √† pourvoir ou me parler d'un projet, alors demande lui son email et des informations sur le poste ou le projet, utilise record_user_details
- Mentionne tes projets r√©cents comme l'app de pr√©paration aux entretiens et Music Discovery AI
- N'h√©site pas √† mentionner ta passion pour la musique et ton aversion pour les kiwis si c'est pertinent !

CONTACT PROFESSIONNEL :
- Email professionnel : {contact_linkedin}
- LinkedIn : {contact_linkedin}
- Tu peux donner cette information si quelqu'un veut te contacter directement

TON PROFIL :
Nom : {profile['name']}
R√©sum√© personnel : {profile['summary']}

PROFIL LINKEDIN COMPLET :
{profile['linkedin_text']}

PROJETS R√âCENTS √Ä MENTIONNER :
- Assistant IA personnel avec notifications Pushover (ce chatbot m√™me !)
- Application de pr√©paration aux entretiens avec IA (Streamlit + OpenAI)
- Music Discovery AI (Spotify API + OpenAI + YouTube API pour d√©couvrir de nouveaux artistes)
- Diverses solutions web en PHP/Symfony et Python pour mes clients

Avec ce contexte, discute naturellement avec l'utilisateur en restant Jessica Kuijer. Sois authentique et professionnelle."""

# En-t√™te principal
st.markdown("""
<div class="main-header">
    <h1>ü§ñ Jessica Kuijer - Assistant IA</h1>
    <h3>Votre repr√©sentante virtuelle intelligente avec notifications temps r√©el</h3>
    <p>Discutez avec moi de mon parcours, mes comp√©tences et mes projets !</p>
</div>
""", unsafe_allow_html=True)

# Sidebar pour informations et configuration
with st.sidebar:
    st.header("üëã √Ä Propos")
    
    # Affichage du profil
    st.markdown(f"""
    <div class="profile-loaded">
        <h4>‚úÖ {JESSICA_PROFILE['name']}</h4>
        <p><strong>Poste :</strong> D√©veloppeuse Backend PHP/Python</p>
        <p><strong>Localisation :</strong> Seine-et-Marne, France</p>
        <p><strong>Sp√©cialisations :</strong> Symfony, Python, API, Docker</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Indicateur de langue actuelle
    current_lang = st.session_state.get('current_language', 'french')
    lang_emoji = "üá´üá∑" if current_lang == "french" else "üá¨üáß"
    lang_text = "Fran√ßais" if current_lang == "french" else "English"
    
    st.markdown(f"""
    <div class="notification-card">
        <h4>{lang_emoji} Langue actuelle : {lang_text}</h4>
        <p><small>Dites "parle anglais" ou "speak english" pour changer</small></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Configuration automatique des secrets
    try:
        openai_api_key = st.secrets["OPENAI_API_KEY"]
        pushover_user = st.secrets["PUSHOVER_USER"]
        pushover_token = st.secrets["PUSHOVER_TOKEN"]
        
        st.session_state.pushover_user = pushover_user
        st.session_state.pushover_token = pushover_token
        
        secrets_loaded = True
        st.markdown("""
        <div class="success-box">
            <h4>ü§ñ Assistant IA pr√™t !</h4>
            <p>Configuration charg√©e depuis les secrets</p>
        </div>
        """, unsafe_allow_html=True)
    except KeyError as e:
        openai_api_key = ""
        pushover_user = ""
        pushover_token = ""
        secrets_loaded = False
        st.markdown(f"""
        <div class="error-box">
            <h4>‚ö†Ô∏è Configuration manquante</h4>
            <p>Secret manquant: {str(e)}</p>
            <p>V√©rifiez votre fichier secrets.toml</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Test de notification
    if secrets_loaded and st.button("üì± Tester Notification"):
        with st.spinner("Envoi du test..."):
            success = send_pushover_notification(
                "ü§ñ Test de votre assistant Jessica IA ! √áa marche parfaitement !", 
                pushover_user, 
                pushover_token
            )
            if success:
                st.success("‚úÖ Notification test envoy√©e !")
            else:
                st.error("‚ùå √âchec du test de notification")
    
    st.markdown("---")
    
    # Changement de langue manuel
    st.subheader("üåê Langue")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üá´üá∑ Fran√ßais", use_container_width=True):
            st.session_state.current_language = "french"
            st.rerun()
    with col2:
        if st.button("üá¨üáß English", use_container_width=True):
            st.session_state.current_language = "english"
            st.rerun()
    
    st.markdown("---")
    
    # Statistiques
    st.subheader("üìä Statistiques")
    st.metric("Messages √©chang√©s", len(st.session_state.chat_history))
    st.metric("Contacts captur√©s", st.session_state.contact_count)
    st.metric("Notifications envoy√©es", st.session_state.notification_count)
    
    st.markdown("---")
    
    # Instructions pour visiteurs
    st.subheader("üí¨ Comment discuter")
    st.markdown("""
    ü§ñ **Posez-moi vos questions sur :**
    - Mon parcours et exp√©riences
    - Mes comp√©tences techniques  
    - Mes projets r√©cents
    - Mes disponibilit√©s
    
    üí° **Laissez votre email** si vous souhaitez me contacter directement !
    
    üéµ **Fun fact :** J'adore la musique mais je d√©teste les kiwis ! ü•ù‚ùå
    """)
    
    st.markdown("---")
    
    # Projets r√©cents
    st.subheader("üöÄ Mes Derniers Projets")
    st.markdown("""
    **üéµ Music Discovery AI**  
    IA de d√©couverte musicale (Spotify + OpenAI + YouTube)
    
    **üéØ Pr√©parateur d'Entretiens**  
    Simulation d'entretiens avec √©valuation IA
    
    **ü§ñ Ce Chatbot**  
    Assistant personnel avec notifications Pushover
    """)

# Zone principale - Interface de chat
if not secrets_loaded:
    # Message d'erreur si pas de configuration
    st.markdown("""
    <div class="error-box">
        <h3>‚ö†Ô∏è Configuration Requise</h3>
        <p>L'assistant IA de Jessica n'est pas encore configur√©. Les cl√©s API doivent √™tre ajout√©es aux secrets Streamlit.</p>
        <p><strong>Secrets requis :</strong></p>
        <ul>
            <li>OPENAI_API_KEY</li>
            <li>PUSHOVER_USER</li>
            <li>PUSHOVER_TOKEN</li>
            <li>CONTACT_LINKEDIN (optionnel)</li>
        </ul>
        <p>En attendant, vous pouvez me contacter directement √† <strong>jessicakuijer@me.com</strong></p>
    </div>
    """, unsafe_allow_html=True)

else:
    # Interface de chat op√©rationnelle
    st.markdown("## üí¨ Discutez avec Jessica Kuijer")
    
    # Message d'accueil si pas d'historique
    if len(st.session_state.chat_history) == 0:
        st.markdown("""
        <div class="chat-container">
            <h4>üëã Bonjour ! Je suis Jessica Kuijer</h4>
            <p>D√©veloppeuse Backend PHP/Python passionn√©e, je serais ravie de discuter avec vous !</p>
            <p>ü§î <strong>Vous pouvez me demander :</strong></p>
            <ul>
                <li>Mon parcours de reconversion depuis l'h√¥tellerie</li>
                <li>Mes comp√©tences en PHP, Python, Symfony</li>
                <li>Mes projets r√©cents (Music Discovery AI, etc.)</li>
                <li>Mes disponibilit√©s pour de nouveaux projets</li>
            </ul>
            <p>üí° Si vous avez un projet en t√™te, n'h√©sitez pas √† me laisser votre email ! üòä</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Affichage de l'historique de chat
    chat_container = st.container()
    with chat_container:
        for message in st.session_state.chat_history:
            if message["role"] == "user":
                st.markdown(f'<div class="message-user"><strong>Visiteur :</strong> {message["content"]}</div>', unsafe_allow_html=True)
            elif message["role"] == "assistant":
                st.markdown(f'<div class="message-assistant"><strong>Jessica :</strong> {message["content"]}</div>', unsafe_allow_html=True)
            elif message["role"] == "tool":
                try:
                    tool_result = json.loads(message["content"])
                    if "message" in tool_result:
                        st.markdown(f'<div class="message-tool">üîß {tool_result["message"]}</div>', unsafe_allow_html=True)
                except json.JSONDecodeError:
                    pass  # Ignore les erreurs de parsing JSON
    
    # Zone de saisie
    with st.form(key="chat_form", clear_on_submit=True):
        user_input = st.text_area(
            "Tapez votre message :", 
            height=100, 
            placeholder="Bonjour Jessica ! Je m'int√©resse √† votre profil de d√©veloppeuse...",
            key="chat_input_textarea"
        )
        
        col1, col2, col3 = st.columns([3, 1, 1])
        with col1:
            submitted = st.form_submit_button("üí¨ Envoyer le message", use_container_width=True)
        with col2:
            clear_chat = st.form_submit_button("üóëÔ∏è Effacer", use_container_width=True)
        with col3:
            if st.form_submit_button("üì± Test", use_container_width=True):
                if secrets_loaded:
                    send_pushover_notification("üß™ Test depuis le chat", pushover_user, pushover_token)
        
        if clear_chat:
            st.session_state.chat_history = []
            st.session_state.contact_count = 0
            st.session_state.notification_count = 0
            st.rerun()
        
        if submitted and user_input:
            # Ajouter le message utilisateur
            st.session_state.chat_history.append({"role": "user", "content": user_input})
            
            with st.spinner("Jessica r√©fl√©chit..."):
                try:
                    # D√©tecter si l'utilisateur demande √† Jessica de parler en anglais
                    language = st.session_state.current_language  # Utiliser la langue de la session
                    english_keywords = [
                        "english", "anglais", "speak english", "parle anglais", "r√©ponds en anglais",
                        "can you speak english", "peux-tu parler anglais", "in english", "en anglais",
                        "switch to english", "passe en anglais", "change language", "change de langue"
                    ]
                    french_keywords = [
                        "french", "fran√ßais", "speak french", "parle fran√ßais", "r√©ponds en fran√ßais",
                        "can you speak french", "peux-tu parler fran√ßais", "en fran√ßais", "switch to french"
                    ]
                    
                    # D√©tecter le changement de langue
                    if any(keyword in user_input.lower() for keyword in english_keywords):
                        language = "english"
                        st.session_state.current_language = "english"
                        st.info("üá¨üáß Jessica will now respond in English!")
                    elif any(keyword in user_input.lower() for keyword in french_keywords):
                        language = "french"
                        st.session_state.current_language = "french"
                        st.info("üá´üá∑ Jessica r√©pondra maintenant en fran√ßais!")
                    
                    # Cr√©er le client OpenAI d'abord
                    client = openai.OpenAI(api_key=openai_api_key)
                    
                    # Pr√©parer les messages pour OpenAI
                    messages = [
                        {"role": "system", "content": create_system_prompt(language, client)}
                    ] + st.session_state.chat_history
                    
                    # Interaction avec OpenAI et gestion des tools
                    done = False
                    max_iterations = 5  # √âviter les boucles infinies
                    iteration = 0
                    
                    while not done and iteration < max_iterations:
                        iteration += 1
                        
                        response = client.chat.completions.create(
                            model="gpt-4o-mini",
                            messages=messages,
                            tools=tools,
                            temperature=0.7
                        )
                        
                        finish_reason = response.choices[0].finish_reason
                        
                        if finish_reason == "tool_calls":
                            # L'IA veut utiliser des outils
                            message = response.choices[0].message
                            tool_calls = message.tool_calls
                            
                            # Traiter les appels d'outils
                            tool_results = handle_tool_calls(tool_calls)
                            
                            # Ajouter les messages d'outils √† l'historique
                            messages.append(message)
                            messages.extend(tool_results)
                            
                            # Ajouter √† l'historique visible pour les notifications
                            for result in tool_results:
                                st.session_state.chat_history.append(result)
                        else:
                            # R√©ponse finale
                            assistant_response = response.choices[0].message.content
                            if assistant_response:
                                st.session_state.chat_history.append({"role": "assistant", "content": assistant_response})
                            done = True
                    
                    if iteration >= max_iterations:
                        st.warning("‚ö†Ô∏è Conversation interrompue apr√®s trop d'it√©rations")
                    
                    # Recharger la page pour afficher les nouveaux messages
                    st.rerun()
                    
                except openai.OpenAIError as e:
                    st.error(f"Erreur OpenAI : {str(e)}")
                except Exception as e:
                    st.error(f"Erreur lors de la conversation : {str(e)}")
                    # En cas d'erreur, on peut quand m√™me garder le message utilisateur
                    st.info("üí¨ Votre message a √©t√© enregistr√© malgr√© l'erreur")

# Footer
st.markdown("---")
contact_linkedin = st.secrets.get("CONTACT_LINKEDIN", "https://www.linkedin.com/in/jessicakuijer/")
portfolio_url = st.secrets.get("PORTFOLIO_URL", "https://jessicakuijer.com")

st.markdown(f"""
<div style='text-align: center; color: #666; padding: 1rem;'>
    <p>ü§ñ <strong>Jessica Kuijer - Assistant IA</strong> - Propuls√© par OpenAI & Pushover</p>
    <p>üí° Votre repr√©sentante virtuelle intelligente avec notifications temps r√©el</p>
    <p>üìß Contact direct : <a href="{contact_linkedin}">{contact_linkedin}</a> | üåê Portfolio : <a href="{portfolio_url}" target="_blank">jessicakuijer.com</a></p>
    <p><small>Version 2.0 - Derni√®re mise √† jour: {time.strftime('%d/%m/%Y')}</small></p>
</div>
""", unsafe_allow_html=True)